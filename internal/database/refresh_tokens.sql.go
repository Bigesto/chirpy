// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkRefreshToken = `-- name: CheckRefreshToken :one
SELECT token, expires_at, revoked_at
FROM refresh_tokens
WHERE token = $1 AND revoked_at IS NULL AND expires_at > NOW()
`

type CheckRefreshTokenRow struct {
	Token     string
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CheckRefreshToken(ctx context.Context, token string) (CheckRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, checkRefreshToken, token)
	var i CheckRefreshTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    NULL
)
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
WHERE user_id = $1 AND revoked_at IS NULL AND expires_at > NOW()
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET updated_at = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
